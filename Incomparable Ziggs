--[[


 -- Incomparable Ziggs v0.1
 -- Only SocooL
 -- 更多分享Q群:384232347
 -- by B1nk


--]]

assert(load(Base64Decode("local DFb100j="0.1"if myHero.charName~="Ziggs"then return end
_G.Ziggs_Autoupdate=false
local XL_={["Collision"]="https://bitbucket.org/Klokje/public-klokjes-bol-scripts/raw/154ae5a9505b2af87c1a6049baa529b934a498a9/Common/Collision.lua",["Prodiction"]="https://bitbucket.org/Klokje/public-klokjes-bol-scripts/raw/ec830facccefb3b52212dba5696c08697c3c2854/Test/Prodiction/Prodiction.lua",["SxOrbWalk"]="https://raw.githubusercontent.com/Superx321/BoL/master/common/SxOrbWalk.lua",["VPrediction"]="https://raw.githubusercontent.com/honda7/BoL/master/Common/VPrediction.lua"}local WYdR,QKKks_zt=false,0
function AfterDownload()QKKks_zt=QKKks_zt-1
if QKKks_zt==0 then WYdR=false
print("<font color=\"#FF0000\">Incomparable Ziggs:</font> <font color=\"#FFFFFF\">Required libraries downloaded successfully, please reload (double F9).</font>")end end
for kP7O5,lqT in pairs(XL_)do
if kP7O5 =="Prodiction"and not VIP_USER then return end;local mP3mlD=LIB_PATH..kP7O5 ..".lua"
if FileExist(mP3mlD)then
require(kP7O5)else WYdR=true;QKKks_zt=QKKks_zt and QKKks_zt+1 or 1;DownloadFile(lqT,mP3mlD,function()
AfterDownload()end)end end;if WYdR then return end;local Are7xU="Incomparable Ziggs"
local yxjl="raw.github.com"
local ZG="/B1nk/Bol-Studio/master/Incomparable%20Ziggs.lua"..
"?rand="..math.random(1,10000)local Vu0cCAf="https://"..yxjl..ZG
local q=SCRIPT_PATH..Are7xU..".lua"function script_Messager(PrPyxMK)
print("<font color=\"#FF0000\">"..Are7xU..
":</font> <font color=\"#FFFFFF\">"..PrPyxMK..".</font>")end
if
_G.Ziggs_Autoupdate then local tczrIB=GetWebResult(yxjl,ZG)
if tczrIB then
local a=string.match(tczrIB,"local%s+Ziggs_Ver%s+=%s+\"%d+.%d+\"")
if a then
a=tonumber(string.match(a or"","%d+%.?%d*"))
if not a then
script_Messager("Please contact the developer of the script \""..
Are7xU.."\", since the auto updater returned an invalid version.")return end
if tonumber(DFb100j)<a then
script_Messager("New version available: "..a)script_Messager("Updating, please don't press F9")
DelayAction(function()
DownloadFile(Vu0cCAf,q,function()
script_Messager("Successfully updated the script, please reload!")end)end,2)else
script_Messager("You've got the latest version: "..a)end end else
script_Messager("Error downloading server version!")end end
function OnLoad()
print("<b><font color=\"#FF0000\">( Incomparable Ziggs )</font></b> <font color=\"#FFFFFF\">loaded!</font>")
print("<b><font color=\"#FF9900\">( Incomparable Series )</font></b> <font color=\"#FF0000\">Only SocooL!</font> <font color=\"#FF99CC\">(by B1nk)</font> <font color=\"#33CCCC\"> qq:</font> <font color=\"#CCFF00\">384232347</font>")UpdateWeb(true,ScriptName,id,HWID)Variables()Menu()
PriorityOnLoad()end
HWID=Base64Encode(tostring(os.getenv("PROCESSOR_IDENTIFIER")..
os.getenv("USERNAME")..
os.getenv("COMPUTERNAME")..os.getenv("PROCESSOR_LEVEL")..
os.getenv("PROCESSOR_REVISION")))
UpdateWeb(true,(string.gsub(UPDATE_NAME,"[^0-9A-Za-z]","")),5,HWID)
if heroManager.iCount<10 then
script_Messager("Too few champions to arrange priorities")elseif heroManager.iCount==6 and TTMAP then ArrangeTTPriorities()else
ArrangePriorities()end end;function OnUnload()
UpdateWeb(false,(string.gsub(UPDATE_NAME,"[^0-9A-Za-z]","")),5,HWID)end
function OnTick()
ComboKey=ZiggsMenu.combo.comboKey;HarassKey=ZiggsMenu.harass.harassKey
FarmKey=ZiggsMenu.farming.farmKey;JungleClearKey=ZiggsMenu.jungle.jungleKey
SatchelKey=ZiggsMenu.misc.satchel.satchJump;SatchelbKey=ZiggsMenu.misc.satchel.behindTarget;if ComboKey then
Combo(Target)end;if HarassKey then Harass(Target)end;if SatchelbKey then
CastW(Target)end;if FarmKey then Farm()end
if JungleClearKey then JungleClear()end;if SatchelKey then SatchelJump()end;if ZiggsMenu.ks.killSteal then
KillSteal()end
if ZiggsMenu.misc.mecUlt.Enable then for i=1,enemyCount do
local wqU76o=enemyTable[i].player
CastR(wqU76o,ZiggsMenu.misc.mecUlt.minEnemies)end;if
ZiggsMenu.misc.mecUlt.mecMTC then moveToCursor()end end
if ZiggsMenu.misc.ultAlert.Enable then GetKillable()end;TickChecks()end
function Variables()if GetGame().map.shortName=="twistedTreeline"then TTMAP=true else
TTMAP=false end
SpellP={name="Short Fuse",buffName="ZiggsPassiveBuff",ready=false,dmg=0}
SpellQ={name="Bouncing Bomb",minrange=850,maxrange=1400,mindelay=0.30,maxdelay=0.85,speed=1700,width=130,ready=false,pos=nil,dmg=0,manaUsage=0}
SpellW={name="Satchel Charge",range=1000,delay=0.25,behindpos=nil,speed=1750,width=275,ready=false,pos=nil,dmg=0,manaUsage=0,canJump=false}
SpellE={name="Hexplosive Minefield",range=900,delay=0.50,speed=1750,width=235,ready=false,pos=nil,dmg=0,manaUsage=0}
SpellR={name="Mega Inferno Bomb",range=5300,delay=1.00,speed=math.huge,width=500,ready=false,pos=nil,dmg=0,manaUsage=0}
SpellI={name="SummonerDot",range=600,ready=false,dmg=0,variable=nil}vPred=VPrediction()
Prodict=ProdictManager.GetInstance()
ProdQMin=Prodict:AddProdictionObject(_Q,SpellQ.minrange,SpellQ.speed,SpellQ.mindelay,SpellQ.width)
ProdQMax=Prodict:AddProdictionObject(_Q,SpellQ.maxrange,SpellQ.speed,SpellQ.maxdelay,SpellQ.width)
ProdW=Prodict:AddProdictionObject(_W,SpellW.range,SpellW.speed,SpellW.delay,SpellW.width)
ProdE=Prodict:AddProdictionObject(_E,SpellE.range,SpellE.speed,SpellE.delay,SpellE.width)
ProdR=Prodict:AddProdictionObject(_R,SpellR.range,SpellR.speed,SpellR.delay,SpellR.width)
ProdQCollision=Collision(SpellQ.maxrange,SpellQ.speed,SpellQ.maxdelay,SpellQ.width)
enemyMinions=minionManager(MINION_ENEMY,SpellQ.maxrange,myHero.visionPos,MINION_SORT_HEALTH_ASC)
jungleMinions=minionManager(MINION_JUNGLE,SpellQ.maxrange,myHero.visionPos,MINION_SORT_HEALTH_ASC)
otherMinions=minionManager(MINION_OTHER,SpellQ.maxrange,myHero.visionPos,MINION_SORT_HEALTH_ASC)JungleMobs={}JungleFocusMobs={}
priorityTable={AP={"Annie","Ahri","Akali","Anivia","Annie","Brand","Cassiopeia","Diana","Evelynn","FiddleSticks","Fizz","Gragas","Heimerdinger","Karthus","Kassadin","Katarina","Kayle","Kennen","Leblanc","Lissandra","Lux","Malzahar","Mordekaiser","Morgana","Nidalee","Orianna","Ryze","Sion","Swain","Syndra","Teemo","TwistedFate","Veigar","Viktor","Vladimir","VelKoz","Xerath","Ziggs","Zyra"},Support={"Alistar","Blitzcrank","Janna","Karma","Leona","Lulu","Nami","Nunu","Sona","Soraka","Taric","Thresh","Zilean"},Tank={"Amumu","Chogath","DrMundo","Galio","Hecarim","Malphite","Maokai","Nasus","Rammus","Sejuani","Nautilus","Shen","Singed","Skarner","Volibear","Warwick","Yorick","Zac"},AD_Carry={"Ashe","Caitlyn","Corki","Draven","Ezreal","Graves","Jayce","Jinx","KogMaw","Lucian","MasterYi","MissFortune","Pantheon","Quinn","Shaco","Sivir","Talon","Tryndamere","Tristana","Twitch","Urgot","Varus","Vayne","Yasuo","Zed"},Bruiser={"Aatrox","Darius","Elise","Fiora","Gangplank","Garen","Gnar","Irelia","JarvanIV","Jax","Khazix","LeeSin","Nocturne","Olaf","Poppy","Renekton","Rengar","Riven","Rumble","Shyvana","Trundle","Udyr","Vi","MonkeyKing","XinZhao"}}
InterruptingSpells={["AbsoluteZero"]=true,["AlZaharNetherGrasp"]=true,["CaitlynAceintheHole"]=true,["Crowstorm"]=true,["DrainChannel"]=true,["FallenOne"]=true,["GalioIdolOfDurand"]=true,["InfiniteDuress"]=true,["KatarinaR"]=true,["MissFortuneBulletTime"]=true,["Teleport"]=true,["Pantheon_GrandSkyfall_Jump"]=true,["ShenStandUnited"]=true,["UrgotSwap2"]=true}
Items={["BLACKFIRE"]={id=3188,range=750},["BRK"]={id=3153,range=500},["BWC"]={id=3144,range=450},["DFG"]={id=3128,range=750},["HXG"]={id=3146,range=700},["ODYNVEIL"]={id=3180,range=525},["DVN"]={id=3131,range=200},["ENT"]={id=3184,range=350},["HYDRA"]={id=3074,range=350},["TIAMAT"]={id=3077,range=350},["YGB"]={id=3142,range=350}}
Consumables={["FLASK"]={id=2041,ready=false},["HPPOT"]={id=2003,ready=false},["MPPOT"]={id=2004,ready=false},["ICHOR"]={id=2048,ready=false},UsingMana=false,UsingHP=false}
if TTMAP then
FocusJungleNames={["TT_NWraith1.1.1"]=true,["TT_NGolem2.1.1"]=true,["TT_NWolf3.1.1"]=true,["TT_NWraith4.1.1"]=true,["TT_NGolem5.1.1"]=true,["TT_NWolf6.1.1"]=true,["TT_Spiderboss8.1.1"]=true}
JungleMobNames={["TT_NWraith21.1.2"]=true,["TT_NWraith21.1.3"]=true,["TT_NGolem22.1.2"]=true,["TT_NWolf23.1.2"]=true,["TT_NWolf23.1.3"]=true,["TT_NWraith24.1.2"]=true,["TT_NWraith24.1.3"]=true,["TT_NGolem25.1.1"]=true,["TT_NWolf26.1.2"]=true,["TT_NWolf26.1.3"]=true}else
JungleMobNames={["Wolf8.1.2"]=true,["Wolf8.1.3"]=true,["YoungLizard7.1.2"]=true,["YoungLizard7.1.3"]=true,["LesserWraith9.1.3"]=true,["LesserWraith9.1.2"]=true,["LesserWraith9.1.4"]=true,["YoungLizard10.1.2"]=true,["YoungLizard10.1.3"]=true,["SmallGolem11.1.1"]=true,["Wolf2.1.2"]=true,["Wolf2.1.3"]=true,["YoungLizard1.1.2"]=true,["YoungLizard1.1.3"]=true,["LesserWraith3.1.3"]=true,["LesserWraith3.1.2"]=true,["LesserWraith3.1.4"]=true,["YoungLizard4.1.2"]=true,["YoungLizard4.1.3"]=true,["SmallGolem5.1.1"]=true}
FocusJungleNames={["Dragon6.1.1"]=true,["Worm12.1.1"]=true,["GiantWolf8.1.1"]=true,["AncientGolem7.1.1"]=true,["Wraith9.1.1"]=true,["LizardElder10.1.1"]=true,["Golem11.1.2"]=true,["GiantWolf2.1.1"]=true,["AncientGolem1.1.1"]=true,["Wraith3.1.1"]=true,["LizardElder4.1.1"]=true,["Golem5.1.2"]=true,["GreatWraith13.1.1"]=true,["GreatWraith14.1.1"]=true}end
buffTypes={BUFF_STUN,BUFF_ROOT,BUFF_KNOCKUP,BUFF_SUPPRESS,BUFF_SLOW,BUFF_CHARM,BUFF_FEAR,BUFF_TAUNT}enemyCount=0;enemyTable={}
for i=1,heroManager.iCount do
local LB1Z=heroManager:GetHero(i)
if LB1Z.team~=player.team then enemyCount=enemyCount+1
enemyTable[enemyCount]={player=LB1Z,indicatorText="",damageGettingText="",ultAlert=false,ready=true}end end
for i=0,objManager.maxObjects do local N9L=objManager:getObject(i)
if
N9L and N9L.valid and not N9L.dead then
if FocusJungleNames[N9L.name]then JungleFocusMobs[
#JungleFocusMobs+1]=N9L elseif JungleMobNames[N9L.name]then JungleMobs[
#JungleMobs+1]=N9L end end end end
function Menu()
ZiggsMenu=scriptConfig("(Incomparable Ziggs)by B1nk","Ziggs")
ZiggsMenu:addSubMenu("Combo Settings","combo")
ZiggsMenu.combo:addParam("comboKey","Full Combo Key (SBTW)",SCRIPT_PARAM_ONKEYDOWN,false,32)
ZiggsMenu.combo:addParam("useW","Use "..SpellW.name.." (W) with Combo",SCRIPT_PARAM_ONOFF,false)
ZiggsMenu.combo:addParam("useR","Use "..SpellR.name.." (R): ",SCRIPT_PARAM_LIST,3,{"If Target Killable","With Burst","No"})
ZiggsMenu.combo:addParam("comboItems","Use Items with Burst",SCRIPT_PARAM_ONOFF,true)ZiggsMenu.combo:permaShow("comboKey")
ZiggsMenu:addSubMenu(
"Harass Settings","harass")
ZiggsMenu.harass:addParam("harassKey","Harass key (C)",SCRIPT_PARAM_ONKEYDOWN,false,GetKey("C"))
ZiggsMenu.harass:addParam("qHarass","Use "..SpellQ.name.." (Q) to Harass",SCRIPT_PARAM_ONOFF,true)
ZiggsMenu.harass:addParam("eHarass","Use "..SpellE.name.." (E) to Harass",SCRIPT_PARAM_ONOFF,false)
ZiggsMenu.harass:addParam("harassMana","Min. Mana Percent: ",SCRIPT_PARAM_SLICE,50,0,100,0)ZiggsMenu.harass:permaShow("harassKey")
ZiggsMenu:addSubMenu(
"Farm Settings","farming")
ZiggsMenu.farming:addParam("farmKey","Farming Key (X)",SCRIPT_PARAM_ONKEYDOWN,false,GetKey('X'))
ZiggsMenu.farming:addParam("qFarm","Farm with "..SpellQ.name.." (Q)",SCRIPT_PARAM_ONOFF,true)
ZiggsMenu.farming:addParam("qFarmMana","Min. Mana Percent: ",SCRIPT_PARAM_SLICE,50,0,100,0)ZiggsMenu.farming:permaShow("farmKey")
ZiggsMenu:addSubMenu(
"Jungle Clear Settings","jungle")
ZiggsMenu.jungle:addParam("jungleKey","Jungle Clear Key (V)",SCRIPT_PARAM_ONKEYDOWN,false,GetKey('V'))
ZiggsMenu.jungle:addParam("jungleQ","Clear with "..SpellQ.name.." (Q)",SCRIPT_PARAM_ONOFF,true)
ZiggsMenu.jungle:addParam("jungleE","Clear with "..SpellE.name.." (E)",SCRIPT_PARAM_ONOFF,true)
ZiggsMenu:addSubMenu("KillSteal Settings","ks")
ZiggsMenu.ks:addParam("killSteal","Use Smart Kill Steal",SCRIPT_PARAM_ONOFF,true)
ZiggsMenu.ks:addParam("useW","Use "..SpellW.name.." (W) to KS",SCRIPT_PARAM_ONOFF,false)
ZiggsMenu.ks:addParam("useR","Use "..SpellR.name.." (R) to KS",SCRIPT_PARAM_ONOFF,false)
ZiggsMenu.ks:addParam("autoIgnite","Auto Ignite",SCRIPT_PARAM_ONOFF,true)ZiggsMenu.ks:permaShow("killSteal")
ZiggsMenu:addSubMenu(
"Draw Settings","drawing")
ZiggsMenu.drawing:addParam("mDraw","Disable All Range Draws",SCRIPT_PARAM_ONOFF,false)
ZiggsMenu.drawing:addParam("Target","Draw Circle on Target",SCRIPT_PARAM_ONOFF,true)
ZiggsMenu.drawing:addParam("cDraw","Draw Damage Text",SCRIPT_PARAM_ONOFF,true)
ZiggsMenu.drawing:addParam("qDraw","Draw "..SpellQ.name.." (Q) Range",SCRIPT_PARAM_ONOFF,true)
ZiggsMenu.drawing:addParam("wDraw","Draw "..SpellW.name.." (W) Range",SCRIPT_PARAM_ONOFF,false)
ZiggsMenu.drawing:addParam("eDraw","Draw "..SpellE.name.." (E) Range",SCRIPT_PARAM_ONOFF,true)
ZiggsMenu.drawing:addParam("rDraw","Draw "..SpellR.name.." (R) Range on the Minimap",SCRIPT_PARAM_ONOFF,true)
ZiggsMenu:addSubMenu("Misc Settings","misc")
ZiggsMenu.misc:addSubMenu("Spells - Misc Settings","smisc")
ZiggsMenu.misc.smisc:addParam("stopChannel","Interrupt Channeling Spells",SCRIPT_PARAM_ONOFF,true)
ZiggsMenu.misc.smisc:addParam("AutoQ","Auto-Q at CCed Enemies",SCRIPT_PARAM_ONOFF,false)
ZiggsMenu.misc:addSubMenu("Spells - Satchel Settings","satchel")
ZiggsMenu.misc.satchel:addParam("satchJump","Satchel Jump (G)",SCRIPT_PARAM_ONKEYDOWN,false,GetKey('G'))
ZiggsMenu.misc.satchel:addParam("MTCsatchJump","Move to Cursor while Satchel Jumping",SCRIPT_PARAM_ONOFF,false)
ZiggsMenu.misc.satchel:addParam("behindTarget","Throw "..
SpellW.name.." (W) behind Target (T)",SCRIPT_PARAM_ONKEYDOWN,false,GetKey('T'))
ZiggsMenu.misc:addSubMenu("Spells - Ultimate Settings","umisc")
ZiggsMenu.misc.umisc:addParam("vPredHC","vPrediction Hitchance to Ult: ",SCRIPT_PARAM_SLICE,2,0,2,0)
ZiggsMenu.misc.umisc:addParam("ultRange","Max Range to Ult: ",SCRIPT_PARAM_SLICE,SpellR.range,700,SpellR.range,0)
ZiggsMenu.misc.umisc:addParam("ultInfo","The smaller is the range, the greater is the hitchance!",SCRIPT_PARAM_INFO,"")
ZiggsMenu.misc:addSubMenu("Spells - Ultimate MEC","mecUlt")
ZiggsMenu.misc.mecUlt:addParam("Enable","Use MEC to Ult",SCRIPT_PARAM_ONKEYDOWN,false,GetKey('U'))
ZiggsMenu.misc.mecUlt:addParam("minEnemies","Min. Enemies in Radius: ",SCRIPT_PARAM_SLICE,2,2,5,0)
ZiggsMenu.misc.mecUlt:addParam("mecMTC","Move to Cursor when Searching for Enemies",SCRIPT_PARAM_ONOFF,false)
ZiggsMenu.misc:addSubMenu("Spells - Collision Settings","colMisc")
ZiggsMenu.misc.colMisc:addParam("spellQ","Use Custom Collision",SCRIPT_PARAM_ONOFF,true)
ZiggsMenu.misc.colMisc:addParam("Minions","Check for Normal Minions",SCRIPT_PARAM_ONOFF,true)
ZiggsMenu.misc.colMisc:addParam("Mobs","Check for Jungle Mobs",SCRIPT_PARAM_ONOFF,true)
ZiggsMenu.misc.colMisc:addParam("Others","Check for Other Minions",SCRIPT_PARAM_ONOFF,true)
ZiggsMenu.misc.colMisc:addParam("colInfo","Using the Custom Collision is better because was made specially for Ziggs's Q",SCRIPT_PARAM_INFO,"")
ZiggsMenu.misc:addSubMenu("Spells - Cast Settings","cast")
ZiggsMenu.misc.cast:addParam("usePackets","Use Packets to Cast Spells",SCRIPT_PARAM_ONOFF,false)
ZiggsMenu.misc:addSubMenu("Info - Ultimate Alert","ultAlert")
ZiggsMenu.misc.ultAlert:addParam("Enable","Enable Ultimate Alert",SCRIPT_PARAM_ONOFF,true)
ZiggsMenu.misc.ultAlert:addParam("alertTime","Time to be shown: ",SCRIPT_PARAM_SLICE,3,1,10,0)
ZiggsMenu.misc.ultAlert:addParam("Pings","Use Client-Side Pings to Alert",SCRIPT_PARAM_ONOFF,false)
ZiggsMenu.misc.ultAlert:addParam("alertInfo","It will print a text in the middle of the screen if an Enemy is Killable",SCRIPT_PARAM_INFO,"")
ZiggsMenu:addSubMenu("Orbwalking Settings","Orbwalking")SxOrb:LoadToMenu(ZiggsMenu.Orbwalking,false)
ZiggsMenu:addParam("predType","Prediction Type",SCRIPT_PARAM_LIST,2,{"Prodiction","VPrediction"})
TargetSelector=TargetSelector(TARGET_LESS_CAST,SpellQ.maxrange,DAMAGE_MAGIC)TargetSelector.name="Ziggs"
ZiggsMenu:addTS(TargetSelector)
ZiggsMenu:addParam("ziggsVer","Version: ",SCRIPT_PARAM_INFO,DFb100j)end
function OnProcessSpell(hDc_M,qW0lRiD1)
if ZiggsMenu.misc.smisc.stopChannel then
if
GetDistanceSqr(hDc_M)<=SpellW.range*
SpellW.range and SpellW.ready then if
InterruptingSpells[qW0lRiD1.name]and hDc_M.team~=myHero.team then
CastSpell(_W,hDc_M.visionPos.x,hDc_M.visionPos.z)end end end end
function OnGainBuff(iD1IUx,JLCOx_ak)if iD1IUx.isMe and JLCOx_ak.name==SpellP.buffName then
SpellP.ready=true end
if ZiggsMenu.misc.smisc.AutoQ then
if

iD1IUx.team~=myHero.team and iD1IUx.type==myHero.type then for i=1,#buffTypes do local hPQ=buffTypes[i]
if JLCOx_ak.type==hPQ then CastQ(iD1IUx)end end end end;if JLCOx_ak.name=="ItemCrystalFlask"then Consumables.UsingHP=true
Consumables.UsingMana=true end;if
JLCOx_ak.name=="FlaskOfCrystalWater"then Consumables.UsingMana=true end
if
JLCOx_ak.name=="RegenerationPotion"then Consumables.UsingHP=true end end
function OnLoseBuff(R1FIoQI,NsoTwDs)if R1FIoQI.isMe and NsoTwDs.name==SpellP.buffName then
SpellP.ready=false end
if NsoTwDs.name=="ItemCrystalFlask"then
Consumables.UsingHP=false;Consumables.UsingMana=false end
if NsoTwDs.name=="FlaskOfCrystalWater"then Consumables.UsingMana=false end
if NsoTwDs.name=="RegenerationPotion"then Consumables.UsingHP=false end end
function OnCreateObj(HGli)if SatchelKey or ComboKey or SatchelbKey then
if
HGli.name=="ZiggsW_mis_ground.troy"then SpellW.canJump=true;SatchelJump()end end
if
FocusJungleNames[HGli.name]then JungleFocusMobs[#JungleFocusMobs+1]=HGli elseif
JungleMobNames[HGli.name]then JungleMobs[#JungleMobs+1]=HGli end end
function OnDeleteObj(iy)
if iy.name=="ZiggsW_mis_ground.troy"then SpellW.canJump=false end
for m6SCS0,NUhYw6R4 in pairs(JungleMobs)do if iy.name==NUhYw6R4.name then
table.remove(JungleMobs,m6SCS0)end end
for Hv,Ch in pairs(JungleFocusMobs)do if iy.name==Ch.name then
table.remove(JungleFocusMobs,Hv)end end end
function OnDraw()
if not myHero.dead then
if not ZiggsMenu.drawing.mDraw then if
ZiggsMenu.drawing.qDraw and SpellQ.ready then
DrawCircle(myHero.x,myHero.y,myHero.z,SpellQ.maxrange,ARGB(255,178,0,0))end;if
ZiggsMenu.drawing.wDraw and SpellW.ready then
DrawCircle(myHero.x,myHero.y,myHero.z,SpellW.range,ARGB(255,32,178,170))end;if
ZiggsMenu.drawing.eDraw and SpellE.ready then
DrawCircle(myHero.x,myHero.y,myHero.z,SpellE.range,ARGB(255,128,0,128))end;if
ZiggsMenu.drawing.rDraw and SpellR.ready then
DrawCircleMinimap(myHero.x,myHero.y,myHero.z,SpellR.range)end end
if ZiggsMenu.drawing.Target then if Target~=nil then
DrawCircle3D(Target.x,Target.y,Target.z,70,1,ARGB(255,255,0,0))end end
if ZiggsMenu.drawing.cDraw then
for i=1,enemyCount do local urkh=enemyTable[i].player
if
ValidTarget(urkh)and urkh.visible then
local zhzpBSx=WorldToScreen(D3DXVECTOR3(urkh.x,urkh.y,urkh.z))local rHSjalVy={X=zhzpBSx.x-35,Y=zhzpBSx.y-50}
DrawText(enemyTable[i].indicatorText,15,rHSjalVy.X,rHSjalVy.Y,(
enemyTable[i].ready and ARGB(255,0,255,0))or ARGB(255,255,220,0))
DrawText(enemyTable[i].damageGettingText,15,rHSjalVy.X,rHSjalVy.Y+15,ARGB(255,255,0,0))end end end end end;function OnBugsplat()
UpdateWeb(false,(string.gsub(UPDATE_NAME,"[^0-9A-Za-z]","")),5,HWID)end
function TickChecks()SpellQ.ready=(
myHero:CanUseSpell(_Q)==READY)SpellW.ready=(
myHero:CanUseSpell(_W)==READY)SpellE.ready=(
myHero:CanUseSpell(_E)==READY)SpellR.ready=(
myHero:CanUseSpell(_R)==READY)
SpellQ.manaUsage=myHero:GetSpellData(_Q).mana;SpellW.manaUsage=myHero:GetSpellData(_W).mana
SpellE.manaUsage=myHero:GetSpellData(_E).mana;SpellR.manaUsage=myHero:GetSpellData(_R).mana
if
myHero:GetSpellData(SUMMONER_1).name:find(SpellI.name)then SpellI.variable=SUMMONER_1 elseif
myHero:GetSpellData(SUMMONER_2).name:find(SpellI.name)then SpellI.variable=SUMMONER_2 end
SpellI.ready=(SpellI.variable~=nil and
myHero:CanUseSpell(SpellI.variable)==READY)TargetSelector.range=TargetSelectorRange()
Target=GetCustomTarget()SxOrb:ForceTarget(Target)DmgCalc()
if not VIP_USER and
ZiggsMenu.misc.cast.usePackets then
GnarMenu.misc.cast.usePackets=false
script_Messager("You can't activate Packet Cast as long as you are not a Vip User.")end;if not VIP_USER and ZiggsMenu.predType==1 then
GnarMenu.predType=2
script_Messager("You can't use Prodiction as long as you are not a Vip User.")end;if
GetGame().isOver then
UpdateWeb(false,(string.gsub(UPDATE_NAME,"[^0-9A-Za-z]","")),5,HWID)end end
function GetCustomTarget()TargetSelector:update()
if _G.MMA_Target and _G.MMA_Target.type==
myHero.type then return _G.MMA_Target elseif
_G.AutoCarry and
_G.AutoCarry.Crosshair and _G.AutoCarry.Attack_Crosshair then return _G.AutoCarry.Attack_Crosshair.target elseif

TargetSelector.target and not TargetSelector.target.dead and
TargetSelector.target.type==myHero.type then return TargetSelector.target else return nil end end
function UseItems(TjhsnP)
for t5jzEd9,JZAU2 in pairs(Items)do local JZAU2=Items[t5jzEd9]
if

GetInventoryItemIsCastable(JZAU2.id)and GetDistanceSqr(TjhsnP)<=JZAU2.range*JZAU2.range then CastItem(JZAU2.id,TjhsnP)end end end
function Combo(zPXTTg)
if ValidTarget(zPXTTg)and zPXTTg~=nil then if ZiggsMenu.combo.comboItems then
UseItems(zPXTTg)end
if ZiggsMenu.combo.useW then CastW(zPXTTg)
DelayAction(function()
CastE(zPXTTg)CastQ(zPXTTg)end,0.3)else CastE(zPXTTg)CastQ(zPXTTg)end
if ZiggsMenu.combo.useR~=3 then if ZiggsMenu.combo.useR==1 then if
zPXTTg.health<SpellR.dmg then CastR(zPXTTg,1)end else
CastR(zPXTTg,1)end end end end
function Harass(seMLr)
if ValidTarget(seMLr)and seMLr~=nil then
if not
isLow('Mana',myHero,ZiggsMenu.harass.harassMana)then
if ZiggsMenu.harass.eHarass then CastE(seMLr)end;if ZiggsMenu.harass.qHarass then CastQ(seMLr)end end end end
function Farm()enemyMinions:update()
for qX,h_8 in pairs(enemyMinions.objects)do
if
ValidTarget(h_8)and h_8 ~=nil then
if


h_8.health<=SpellQ.dmg and
(GetDistanceSqr(h_8)>myHero.range*
myHero.range or not SxOrb:CanAttack())and GetDistanceSqr(h_8)<=
SpellQ.minrange*SpellQ.minrange and ZiggsMenu.farming.qFarm and
not isLow('Mana',myHero,ZiggsMenu.farming.qFarmMana)then CastQ(h_8)end end end end
function JungleClear()
if ZiggsMenu.jungle.jungleKey then local xL7OTb=GetJungleMob()
if xL7OTb~=nil then
if

ZiggsMenu.jungle.jungleQ and SpellQ.ready and GetDistanceSqr(xL7OTb)<=
SpellQ.maxrange*SpellQ.maxrange then CastQ(xL7OTb)end
if
ZiggsMenu.jungle.jungleE and SpellE.ready and GetDistanceSqr(xL7OTb)<=
SpellE.range*SpellE.range then CastE(xL7OTb)end end end end
function SatchelJump()
if ZiggsMenu.misc.satchel.MTCsatchJump then moveToCursor()end;if not SpellW.ready then return end
local w8T3f,K,qL=(Vector(myHero)-Vector(mousePos)):normalized():unpack()
if SpellW.canJump then if ZiggsMenu.misc.cast.usePackets then
Packet('S_CAST',{spellId=_W}):send()else CastSpell(_W)end else
if
ZiggsMenu.misc.cast.usePackets then
Packet('S_CAST',{spellId=_W,fromX=myHero.x+ (w8T3f*50),fromY=myHero.z+ (qL*50)}):send()else
CastSpell(_W,myHero.x+ (w8T3f*50),myHero.z+ (qL*50))end end end
function CastQ(vfIyB)
if vfIyB==nil or not SpellQ.ready or
(GetDistanceSqr(vfIyB,myHero)>
SpellQ.maxrange*SpellQ.maxrange)then return false end
if
GetDistanceSqr(vfIyB,myHero)<=SpellQ.minrange*SpellQ.minrange then
if ZiggsMenu.predType==1 then
SpellQ.pos=ProdQMin:GetPrediction(vfIyB)
if SpellQ.pos~=nil then
if ZiggsMenu.misc.cast.usePackets then
Packet("S_CAST",{spellId=_Q,toX=SpellQ.pos.x,toY=SpellQ.pos.z,fromX=SpellQ.pos.x,fromY=SpellQ.pos.z}):send()else CastSpell(_Q,SpellQ.pos.x,SpellQ.pos.z)end;return true end else
local quNsijN,QUh2tc,qboV=vPred:GetCircularCastPosition(vfIyB,SpellQ.mindelay,SpellQ.width,SpellQ.minrange,SpellQ.speed,myHero,false)
if QUh2tc>=2 then
if ZiggsMenu.misc.cast.usePackets then
Packet("S_CAST",{spellId=_Q,toX=quNsijN.x,toY=quNsijN.z,fromX=quNsijN.x,fromY=quNsijN.z}):send()else CastSpell(_Q,quNsijN.x,quNsijN.z)end;return true end end elseif
GetDistanceSqr(vfIyB,myHero)<=SpellQ.maxrange*SpellQ.maxrange then
if ZiggsMenu.predType==1 then
SpellQ.pos=ProdQMax:GetPrediction(vfIyB)
if SpellQ.pos~=nil then
local nSBOx7=
ZiggsMenu.misc.colMisc.spellQ and CustomCollision(vfIyB)or ProdQCollision:GetMinionCollision(vfIyB,SpellQ.pos)
if not nSBOx7 then
if ZiggsMenu.misc.cast.usePackets then
Packet("S_CAST",{spellId=_Q,toX=SpellQ.pos.x,toY=SpellQ.pos.z,fromX=SpellQ.pos.x,fromY=SpellQ.pos.z}):send()else CastSpell(_Q,SpellQ.pos.x,SpellQ.pos.z)end;return true end end else
local u,K,i1=vPred:GetCircularCastPosition(vfIyB,SpellQ.maxdelay,SpellQ.width,SpellQ.maxrange,SpellQ.speed,myHero,
ZiggsMenu.misc.colMisc.spellQ and false or true)local zz1QI=CustomCollision(vfIyB)
if K>=2 and
(
(
ZiggsMenu.misc.colMisc.spellQ and zz1QI~=nil and not zz1QI)or not ZiggsMenu.misc.colMisc.spellQ)then
if
ZiggsMenu.misc.cast.usePackets then
Packet("S_CAST",{spellId=_Q,toX=u.x,toY=u.z,fromX=u.x,fromY=u.z}):send()else CastSpell(_Q,u.x,u.z)end;return true end end end end
function CastW(kFTAh)if
kFTAh==nil or
(GetDistanceSqr(kFTAh)>SpellW.range*SpellW.range)or not SpellW.ready then return false end
if
ZiggsMenu.predType==1 then SpellW.pos=ProdW:GetPrediction(kFTAh)
if
SpellW.pos~=nil then
SpellW.behindpos=kFTAh+
(
Vector(kFTAh.visionPos.x,kFTAh.visionPos.y,kFTAh.visionPos.z)-Vector(SpellW.pos.x,SpellW.pos.y,SpellW.pos.z)):normalized()*50
if ZiggsMenu.misc.cast.usePackets then
Packet("S_CAST",{spellId=_W,toX=SpellW.behindpos.x,toY=SpellW.behindpos.z,fromX=SpellW.behindpos.x,fromY=SpellW.behindpos.z}):send()else
CastSpell(_W,SpellW.behindpos.x,SpellW.behindpos.z)end;return true end else
local LBf,dijn4Ph,CO1=vPred:GetCircularCastPosition(kFTAh,SpellW.delay,SpellW.width,SpellW.range,SpellW.speed,myHero,false)
if dijn4Ph>=2 then
SpellW.behindpos=kFTAh+
(
Vector(kFTAh.visionPos.x,kFTAh.visionPos.y,kFTAh.visionPos.z)-Vector(LBf.x,LBf.y,LBf.z)):normalized()*50
if ZiggsMenu.misc.cast.usePackets then
Packet("S_CAST",{spellId=_W,toX=SpellW.behindpos.x,toY=SpellW.behindpos.z,fromX=SpellW.behindpos.x,fromY=SpellW.behindpos.z}):send()else
CastSpell(_W,SpellW.behindpos.x,SpellW.behindpos.z)end;return true end end end
function CastE(RlZo)if
RlZo==nil or
(GetDistanceSqr(RlZo)>SpellE.range*SpellE.range)or not SpellE.ready then return false end
if
ZiggsMenu.predType==1 then SpellE.pos=ProdE:GetPrediction(RlZo)
if SpellE.pos~=nil then
if
ZiggsMenu.misc.cast.usePackets then
Packet("S_CAST",{spellId=_E,toX=SpellE.pos.x,toY=SpellE.pos.z,fromX=SpellE.pos.x,fromY=SpellE.pos.z}):send()else CastSpell(_E,SpellE.pos.x,SpellE.pos.z)end;return true end else
local SUn,Ib4,fjV1G2=vPred:GetCircularAOECastPosition(RlZo,SpellE.delay,SpellE.width,SpellE.range,SpellE.speed,myHero)
if Ib4 >=2 then
if ZiggsMenu.misc.cast.usePackets then
Packet("S_CAST",{spellId=_E,toX=SUn.x,toY=SUn.z,fromX=SUn.x,fromY=SUn.z}):send()else CastSpell(_E,SUn.x,SUn.z)end;return true end end end
function CastR(Do,_)
if
Do==nil or
(GetDistanceSqr(Do)>ZiggsMenu.misc.umisc.ultRange*
ZiggsMenu.misc.umisc.ultRange)or not SpellR.ready then return false end
if _==1 then
if ZiggsMenu.predType==1 then
SpellR.pos=ProdR:GetPrediction(Do)
if SpellR.pos~=nil then
if ZiggsMenu.misc.cast.usePackets then
Packet("S_CAST",{spellId=_R,toX=SpellR.pos.x,toY=SpellR.pos.z,fromX=SpellR.pos.x,fromY=SpellR.pos.z}):send()else CastSpell(_R,SpellR.pos.x,SpellR.pos.z)end;return true end else
local TqYJ4,DI,b=vPred:GetCircularAOECastPosition(Do,SpellR.delay,SpellR.width,SpellR.range,SpellR.speed,myHero)
if DI>=ZiggsMenu.misc.umisc.vPredHC then
if
ZiggsMenu.misc.cast.usePackets then
Packet("S_CAST",{spellId=_R,toX=TqYJ4.x,toY=TqYJ4.z,fromX=TqYJ4.x,fromY=TqYJ4.z}):send()else CastSpell(_R,TqYJ4.x,TqYJ4.z)end;return true end end else
local E=GetAoESpellPosition(SpellR.width,Do,SpellR.delay,SpellR.speed)
if ZiggsMenu.misc.cast.usePackets then
Packet("S_CAST",{spellId=_R,toX=E.x,toY=E.z,fromX=E.x,fromY=E.z}):send()else CastSpell(_R,E.x,E.z)end;return true end end
function moveToCursor()if GetDistance(mousePos)then
local KMw7_i1s=myHero+
(Vector(mousePos)-myHero):normalized()*300
Packet('S_MOVE',{x=KMw7_i1s.x,y=KMw7_i1s.z}):send()end end
function ArrangePriorities()
for i=1,enemyCount do local CQi=enemyTable[i].player
SetPriority(priorityTable.AD_Carry,CQi,1)SetPriority(priorityTable.AP,CQi,2)
SetPriority(priorityTable.Support,CQi,3)SetPriority(priorityTable.Bruiser,CQi,4)
SetPriority(priorityTable.Tank,CQi,5)end end
function ArrangeTTPriorities()
for i=1,enemyCount do local nHlJ=enemyTable[i].player
SetPriority(priorityTable.AD_Carry,nHlJ,1)SetPriority(priorityTable.AP,nHlJ,1)
SetPriority(priorityTable.Support,nHlJ,2)SetPriority(priorityTable.Bruiser,nHlJ,2)
SetPriority(priorityTable.Tank,nHlJ,3)end end;function SetPriority(lw4Q7kbl,IN,QYf1)
for i=1,#lw4Q7kbl do if IN.charName:find(lw4Q7kbl[i])~=nil then
TS_SetHeroPriority(QYf1,IN.charName)end end end
function GetJungleMob()for RfsnisO,lvW2ga in
pairs(JungleFocusMobs)do
if ValidTarget(lvW2ga,SpellQ.maxrange)then return lvW2ga end end
for T7RKP,_L6Bs in pairs(JungleMobs)do if
ValidTarget(_L6Bs,SpellQ.maxrange)then return _L6Bs end end end
function DmgCalc()
for i=1,enemyCount do local SH=enemyTable[i].player
if
ValidTarget(SH)and SH.visible then SpellP.dmg=(SpellP.ready and getDmg("P",SH,myHero))or
0
SpellQ.dmg=(SpellQ.ready and
getDmg("Q",SH,myHero))or 0;SpellW.dmg=(SpellW.ready and getDmg("W",SH,myHero))or
0
SpellE.dmg=(SpellE.ready and
getDmg("E",SH,myHero))or 0;SpellR.dmg=(SpellR.ready and getDmg("R",SH,myHero))or
0
SpellI.dmg=(SpellI.ready and
getDmg("IGNITE",SH,myHero))or 0
if SH.health<SpellR.dmg then enemyTable[i].indicatorText="R Kill"
enemyTable[i].ready=
SpellR.ready and SpellR.manaUsage<=myHero.mana elseif SH.health<SpellQ.dmg then enemyTable[i].indicatorText="Q Kill"
enemyTable[i].ready=
SpellQ.ready and SpellQ.manaUsage<=myHero.mana elseif SH.health<SpellW.dmg then enemyTable[i].indicatorText="W Kill"
enemyTable[i].ready=
SpellW.ready and SpellW.manaUsage<=myHero.mana elseif SH.health<SpellE.dmg then enemyTable[i].indicatorText="E Kill"
enemyTable[i].ready=
SpellE.ready and SpellE.manaUsage<=myHero.mana elseif SH.health<SpellP.dmg then enemyTable[i].indicatorText="P Kill"
enemyTable[i].ready=SpellP.ready elseif SH.health<SpellQ.dmg+SpellR.dmg then
enemyTable[i].indicatorText="Q + R Kill"
enemyTable[i].ready=SpellQ.ready and SpellR.ready and SpellQ.manaUsage+
SpellR.manaUsage<=myHero.mana elseif
SH.health<SpellP.dmg+SpellQ.dmg+SpellR.dmg then enemyTable[i].indicatorText="P + Q + R Kill"
enemyTable[i].ready=
SpellP.ready and SpellQ.ready and SpellR.ready and SpellQ.manaUsage+
SpellR.manaUsage<=myHero.mana elseif SH.health<SpellW.dmg+SpellR.dmg then
enemyTable[i].indicatorText="W + R Kill"
enemyTable[i].ready=SpellW.ready and SpellR.ready and SpellW.manaUsage+
SpellR.manaUsage<=myHero.mana elseif
SH.health<SpellP.dmg+SpellW.dmg+SpellR.dmg then enemyTable[i].indicatorText="P + W + R Kill"
enemyTable[i].ready=
SpellP.ready and SpellW.ready and SpellR.ready and SpellW.manaUsage+
SpellR.manaUsage<=myHero.mana elseif SH.health<SpellE.dmg+SpellR.dmg then
enemyTable[i].indicatorText="E + R Kill"
enemyTable[i].ready=SpellE.ready and SpellR.ready and SpellE.manaUsage+
SpellR.manaUsage<=myHero.mana elseif
SH.health<SpellP.dmg+SpellE.dmg+SpellR.dmg then enemyTable[i].indicatorText="P + E + R Kill"
enemyTable[i].ready=
SpellP.ready and SpellE.ready and SpellR.ready and SpellE.manaUsage+
SpellR.manaUsage<=myHero.mana elseif
SH.health<SpellQ.dmg+SpellW.dmg+SpellR.dmg then enemyTable[i].indicatorText="Q + W + R Kill"
enemyTable[i].ready=
SpellQ.ready and SpellW.ready and SpellR.ready and
SpellQ.manaUsage+
SpellW.manaUsage+SpellR.manaUsage<=myHero.mana elseif SH.health<
SpellP.dmg+SpellQ.dmg+SpellW.dmg+SpellR.dmg then
enemyTable[i].indicatorText="P + Q + W + R Kill"
enemyTable[i].ready=
SpellP.ready and SpellQ.ready and SpellW.ready and SpellR.ready and

SpellQ.manaUsage+SpellW.manaUsage+SpellR.manaUsage<=myHero.mana elseif
SH.health<SpellQ.dmg+SpellE.dmg+SpellR.dmg then enemyTable[i].indicatorText="Q + E + R Kill"
enemyTable[i].ready=
SpellQ.ready and SpellE.ready and SpellR.ready and
SpellQ.manaUsage+
SpellE.manaUsage+SpellR.manaUsage<=myHero.mana elseif SH.health<
SpellP.dmg+SpellQ.dmg+SpellE.dmg+SpellR.dmg then
enemyTable[i].indicatorText="P + Q + E + R Kill"
enemyTable[i].ready=
SpellP.ready and SpellQ.ready and SpellE.ready and SpellR.ready and

SpellQ.manaUsage+SpellE.manaUsage+SpellR.manaUsage<=myHero.mana elseif
SH.health<SpellQ.dmg+SpellW.dmg+SpellR.dmg then enemyTable[i].indicatorText="Q + W + E + R Kill"
enemyTable[i].ready=

SpellQ.ready and SpellW.ready and SpellE.ready and SpellR.ready and
SpellQ.manaUsage+SpellW.manaUsage+SpellE.ready+
SpellR.manaUsage<=myHero.mana elseif SH.health<
SpellQ.dmg+SpellW.dmg+SpellR.dmg+SpellP.dmg then
enemyTable[i].indicatorText="All-In Kill"
enemyTable[i].ready=

SpellP.ready and SpellQ.ready and SpellW.ready and SpellE.ready and SpellR.ready and
SpellQ.manaUsage+SpellW.manaUsage+SpellE.ready+
SpellR.manaUsage<=myHero.mana else
local fFeQcIM=SpellP.dmg+SpellQ.dmg+SpellW.dmg+SpellR.dmg;local JEHSHPh3=math.round(SH.health-fFeQcIM)local bb=math.round(JEHSHPh3/
SH.maxHealth*100)enemyTable[i].indicatorText=
bb.."% Harass"
enemyTable[i].ready=
SpellP.ready and SpellQ.ready and SpellW.ready and SpellE.ready and
SpellR.ready end;local wU4wYbA9=getDmg("AD",myHero,SH)
enemyTable[i].damageGettingText=SH.charName..

" kills me with "..math.ceil(myHero.health/wU4wYbA9).." hits"end end end
function KillSteal()
for i=1,enemyCount do local o5e6fP=enemyTable[i].player
if ValidTarget(o5e6fP)and
o5e6fP.visible then
if o5e6fP.health<SpellR.dmg then CastR(o5e6fP,1)elseif
o5e6fP.health<SpellQ.dmg and ZiggsMenu.ks.useR then
CastQ(o5e6fP)elseif o5e6fP.health<SpellW.dmg and ZiggsMenu.ks.useW then
CastW(o5e6fP)elseif o5e6fP.health<SpellE.dmg then CastE(o5e6fP)elseif
o5e6fP.health<
SpellQ.dmg+SpellR.dmg and SpellQ.ready and SpellR.ready then CastQ(o5e6fP)elseif o5e6fP.health<SpellW.dmg+SpellR.dmg and
SpellW.ready and SpellR.ready and
ZiggsMenu.ks.useW then CastW(o5e6fP)elseif o5e6fP.health<
SpellE.dmg+SpellR.dmg and SpellE.ready and
SpellR.ready then CastE(o5e6fP)elseif


o5e6fP.health<SpellQ.dmg+
SpellW.dmg+SpellR.dmg and SpellQ.ready and SpellW.ready and SpellR.ready and ZiggsMenu.ks.useW then CastW(o5e6fP)
DelayAction(function()CastQ(o5e6fP)end,0.3)elseif

o5e6fP.health<SpellQ.dmg+SpellE.dmg+SpellR.dmg and SpellQ.ready and SpellE.ready and SpellR.ready then
CastE(o5e6fP)CastQ(o5e6fP)elseif
o5e6fP.health<
SpellQ.dmg+SpellW.dmg+SpellR.dmg and SpellQ.ready and SpellE.ready and SpellR.ready and
ZiggsMenu.ks.useW then
CastW(o5e6fP)
DelayAction(function()CastE(o5e6fP)CastQ(o5e6fP)end,0.3)end;if ZiggsMenu.ks.autoIgnite then AutoIgnite(o5e6fP)end end end end
function AutoIgnite(iq7ol)
if iq7ol.health<SpellI.dmg and GetDistanceSqr(iq7ol)<=
SpellI.range*SpellI.range then if SpellI.ready then
CastSpell(SpellI.variable,iq7ol)end end end
function isLow(eMV,WDTNkTD,Oejsws)
if eMV=='Mana'then
if WDTNkTD.mana<
(WDTNkTD.maxMana* (Oejsws/100))then return true else return false end elseif eMV=='HP'then
if WDTNkTD.health<
(WDTNkTD.maxHealth* (Oejsws/100))then return true else return false end end end
function GetKillable()
for i=1,enemyCount do local CkD73N0=enemyTable[i].player
if
CkD73N0.visible and CkD73N0 ~=nil and not CkD73N0.dead then
if
CkD73N0.health<SpellR.dmg and SpellR.ready then
if not enemyTable[i].ultAlert then
PrintAlert(
CkD73N0.charName.." can be Killed by Ult",ZiggsMenu.misc.ultAlert.alertTime,128,255,0)if ZiggsMenu.misc.ultAlert.Pings then
Packet('R_PING',{x=CkD73N0.x,y=CkD73N0.z,type=PING_FALLBACK}):receive()end
enemyTable[i].ultAlert=true end end else enemyTable[i].ultAlert=false end end end
function CustomCollision(PlwhaRKJ)enemyMinions:update()
jungleMinions:update()otherMinions:update()
local Caz4NM4Z={FirstBounce=Vector(myHero)+SpellQ.minrange*
(Vector(PlwhaRKJ)-
Vector(myHero)):normalized(),SecondBounce=
Vector(myHero)+
(SpellQ.minrange+ (SpellQ.minrange*0.44711764782193))*
(Vector(PlwhaRKJ)-Vector(myHero)):normalized()}
if ZiggsMenu.misc.colMisc.Minions then
for XVxxx,hD in pairs(enemyMinions.objects)do
if

GetDistanceSqr(hD,Caz4NM4Z.FirstBounce)<=SpellQ.width*SpellQ.width and
GetDistanceSqr(PlwhaRKJ,Caz4NM4Z.FirstBounce)>SpellQ.width*SpellQ.width then return true end
if

GetDistanceSqr(hD,Caz4NM4Z.SecondBounce)<=SpellQ.width*SpellQ.width and GetDistanceSqr(PlwhaRKJ,Caz4NM4Z.SecondBounce)>
SpellQ.width*SpellQ.width then return true end end end
if ZiggsMenu.misc.colMisc.Mobs then
for G5BuU5,AfwsY in pairs(jungleMinions.objects)do
if

GetDistanceSqr(AfwsY,Caz4NM4Z.FirstBounce)<=SpellQ.width*SpellQ.width and
GetDistanceSqr(PlwhaRKJ,Caz4NM4Z.FirstBounce)>SpellQ.width*SpellQ.width then return true end
if
GetDistanceSqr(AfwsY,Caz4NM4Z.SecondBounce)<=
SpellQ.width*SpellQ.width and
GetDistanceSqr(PlwhaRKJ,Caz4NM4Z.SecondBounce)>SpellQ.width*SpellQ.width then return true end end end
if ZiggsMenu.misc.colMisc.Others then
for T,WZs in pairs(otherMinions.objects)do
if

GetDistanceSqr(WZs,Caz4NM4Z.FirstBounce)>SpellQ.width*SpellQ.width and
GetDistanceSqr(PlwhaRKJ,Caz4NM4Z.FirstBounce)>SpellQ.width*SpellQ.width then return true end
if

GetDistanceSqr(WZs,Caz4NM4Z.SecondBounce)>SpellQ.width*SpellQ.width and GetDistanceSqr(PlwhaRKJ,Caz4NM4Z.SecondBounce)>
SpellQ.width*SpellQ.width then return true end end end;return false end
function GetCenter(ITdz)local AjfoUo=0;local Er9zidsB=0;for i=1,#ITdz do AjfoUo=AjfoUo+ITdz[i].x;Er9zidsB=Er9zidsB+
ITdz[i].z end;local X={x=AjfoUo/#ITdz,y=0,z=
Er9zidsB/#ITdz}return X end
function ContainsThemAll(dR,JFXtQwy)local uMV17h0=dR.radius*dR.radius;local E2NZK=true;local WNWWe=1;while E2NZK and
WNWWe<=#JFXtQwy do
E2NZK=GetDistanceSqr(JFXtQwy[WNWWe],dR.center)<=uMV17h0;WNWWe=WNWWe+1 end
return E2NZK end
function FarthestFromPositionIndex(zMzjn3lk,Trkkpmd)local L=2;local GGv
local ZIzh4Si=GetDistanceSqr(zMzjn3lk[L],Trkkpmd)
for i=3,#zMzjn3lk do GGv=GetDistanceSqr(zMzjn3lk[i],Trkkpmd)if
GGv>ZIzh4Si then L=i;ZIzh4Si=GGv end end;return L end;function RemoveWorst(c8D4n81,cSjJHx)local fa=FarthestFromPositionIndex(c8D4n81,cSjJHx)
table.remove(c8D4n81,fa)return c8D4n81 end
function GetInitialTargets(M,dIZlrvD)
local jQgsATKd={dIZlrvD}local aBbGg=4*M*M
for i=1,heroManager.iCount do target=heroManager:GetHero(i)
if


target.networkID~=dIZlrvD.networkID and ValidTarget(target)and GetDistanceSqr(dIZlrvD,target)<aBbGg then table.insert(jQgsATKd,target)end end;return jQgsATKd end
function GetPredictedInitialTargets(D9,G,gE,QgC,CYoa)
local K3ipRr=vPred:GetPredictedPos(G,gE,QgC,myHero,CYoa)local F2tY={K3ipRr}local rb21L2=4*D9*D9
for i=1,heroManager.iCount do
target=heroManager:GetHero(i)
if ValidTarget(target)then
predicted_target=vPred:GetPredictedPos(target,gE,QgC,myHero,CYoa)if target.networkID~=G.networkID and
GetDistanceSqr(K3ipRr,predicted_target)<rb21L2 then
table.insert(F2tY,predicted_target)end end end;return F2tY end
function GetAoESpellPosition(o_v255,wUVm,VQ,oTYNsnP)
local I=GetPredictedInitialTargets(o_v255,wUVm,VQ,oTYNsnP)local L=GetCenter(I)local mR5gwW=true;local DfbW=Circle(L,o_v255)DfbW.center=L;if
#I>=ZiggsMenu.misc.mecUlt.minEnemies then
mR5gwW=ContainsThemAll(DfbW,I)end
while not mR5gwW do I=RemoveWorst(I,L)
L=GetCenter(I)DfbW.center=L;mR5gwW=ContainsThemAll(DfbW,I)end;return L end
function TargetSelectorRange()
return


SpellQ.ready and SpellQ.maxrange or
(not SpellQ.ready and SpellW.Ready)and SpellW.range or
(not SpellQ.ready and not SpellW.ready and SpellE.ready)and SpellE.range or SxOrb.MyRange end
assert(load(Base64Decode("G0x1YVIAAQQEBAgAGZMNChoKAAAAAAAAAAAAAQIDAAAAJQAAAAgAAIAfAIAAAQAAAAQKAAAAVXBkYXRlV2ViAAEAAAACAAAADAAAAAQAETUAAAAGAUAAQUEAAB2BAAFGgUAAh8FAAp0BgABdgQAAjAHBAgFCAQBBggEAnUEAAhsAAAAXwAOAjMHBAgECAgBAAgABgUICAMACgAEBgwIARsNCAEcDwwaAA4AAwUMDAAGEAwBdgwACgcMDABaCAwSdQYABF4ADgIzBwQIBAgQAQAIAAYFCAgDAAoABAYMCAEbDQgBHA8MGgAOAAMFDAwABhAMAXYMAAoHDAwAWggMEnUGAAYwBxQIBQgUAnQGBAQgAgokIwAGJCICBiIyBxQKdQQABHwCAABcAAAAECAAAAHJlcXVpcmUABAcAAABzb2NrZXQABAcAAABhc3NlcnQABAQAAAB0Y3AABAgAAABjb25uZWN0AAQQAAAAYm9sLXRyYWNrZXIuY29tAAMAAAAAAABUQAQFAAAAc2VuZAAEGAAAAEdFVCAvcmVzdC9uZXdwbGF5ZXI/aWQ9AAQHAAAAJmh3aWQ9AAQNAAAAJnNjcmlwdE5hbWU9AAQHAAAAc3RyaW5nAAQFAAAAZ3N1YgAEDQAAAFteMC05QS1aYS16XQAEAQAAAAAEJQAAACBIVFRQLzEuMA0KSG9zdDogYm9sLXRyYWNrZXIuY29tDQoNCgAEGwAAAEdFVCAvcmVzdC9kZWxldGVwbGF5ZXI/aWQ9AAQCAAAAcwAEBwAAAHN0YXR1cwAECAAAAHBhcnRpYWwABAgAAAByZWNlaXZlAAQDAAAAKmEABAYAAABjbG9zZQAAAAAAAQAAAAAAEAAAAEBvYmZ1c2NhdGVkLmx1YQA1AAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAMAAAADAAAAAwAAAAMAAAAEAAAABAAAAAUAAAAFAAAABQAAAAYAAAAGAAAABwAAAAcAAAAHAAAABwAAAAcAAAAHAAAABwAAAAgAAAAHAAAABQAAAAgAAAAJAAAACQAAAAkAAAAKAAAACgAAAAsAAAALAAAACwAAAAsAAAALAAAACwAAAAsAAAAMAAAACwAAAAkAAAAMAAAADAAAAAwAAAAMAAAADAAAAAwAAAAMAAAADAAAAAwAAAAGAAAAAgAAAGEAAAAAADUAAAACAAAAYgAAAAAANQAAAAIAAABjAAAAAAA1AAAAAgAAAGQAAAAAADUAAAADAAAAX2EAAwAAADUAAAADAAAAYWEABwAAADUAAAABAAAABQAAAF9FTlYAAQAAAAEAEAAAAEBvYmZ1c2NhdGVkLmx1YQADAAAADAAAAAIAAAAMAAAAAAAAAAEAAAAFAAAAX0VOVgA="),
nil,"bt",_ENV))()"), nil, "bt", _ENV))()
